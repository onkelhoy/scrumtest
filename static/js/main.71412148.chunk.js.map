{"version":3,"sources":["reportWebVitals.ts","components/Notification.tsx","components/Loading.tsx","components/Question.tsx","components/List.tsx","components/Blank.tsx","components/Brain.tsx","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","View","toggle","agree","disagree","className","onClick","ErrorTypes","question","Answer","index","total","React","useState","picking","error","setError","loading","setLoading","answers","setAnswers","errors","setErrors","success","setSuccess","timer","useRef","useEffect","current","window","clearTimeout","size","Object","keys","length","isCorrect","ans","join","id","text","disabled","map","v","Number","setTimeout","correct","falsly","find","console","log","toString","answer","nothing","options","option","classNames","push","copy","toggleAnswer","count","score","state","loadQuestion","selected","setSelected","Array","fill","tabIndex","STATES","notification","submit","Brain","finished","localStorage","setItem","setState","list","clear","blank","_i","DATA","i","Timer","getItem","this","Blank","overlay","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.71412148.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\n\nimport 'styles/notification.css';\n\nexport interface Props {\n  toggle:boolean, \n  agree:()=>void, \n  disagree:()=>void,\n}\n\nexport default function View ({ toggle, agree, disagree }:Props) {\n  return (\n    <div className=\"notification-wrapper\">\n      <div className={`popup ${toggle ? \"show\" : \"hide\"}`}>\n        <h1>OBS</h1>\n        <p>We store score on your machine</p>\n\n        <div className=\"button-group\">\n          <button onClick={agree}>Agree</button>\n          <button onClick={disagree}>Disagree</button>\n        </div>\n      </div>\n    </div>\n  );\n}","import React from 'react';\n\nimport 'styles/loading.css';\n\nexport default function View () {\n  return (\n    <div className=\"loading-screen\">\n      <p>Loading..</p>\n    </div>\n  )\n}","import React from 'react';\n\nimport 'styles/question.css';\nimport { IQuestion } from 'types/question';\n\nexport interface Props {\n  question:IQuestion,\n  index: number,\n  total: number,\n  Answer: (answers:number[]) => boolean;\n}\n\ntype Answers = {\n  [key:number]:boolean\n}\n\nenum ErrorTypes {\n  nothing,\n  answer = \"answer\",\n  picking = 2,\n}\n\nexport default function View ({ question, Answer, index, total }:Props) {\n  const [error, setError] = React.useState(ErrorTypes.picking);\n  const [loading, setLoading] = React.useState(false);\n  const [answers, setAnswers] = React.useState({} as Answers);\n  const [errors, setErrors] = React.useState({} as Answers);\n  const [success, setSuccess] = React.useState({} as Answers);\n\n  const timer = React.useRef<null | number>(null);\n\n  function toggleAnswer(index:number) {\n    if (!loading) {\n      const copy = { ...answers };\n      if (copy[index])\n        delete copy[index];\n      else copy[index] = true;\n  \n      setAnswers(copy);\n  \n      if (Object.keys(copy).length !== question.answers.length) \n        setError(ErrorTypes.picking);\n      else setError(ErrorTypes.nothing);\n    }\n  }\n\n  function submit() {\n    const ans = Object.keys(answers).map(v => Number(v));\n\n    setLoading(true);\n    timer.current = window.setTimeout(() => {\n      const correct = {} as Answers;\n      const falsly = {} as Answers;\n\n      for (const ans in answers) {\n        if (question.answers.find(v => {\n          if (ans === \"0\") console.log(v, ans, v.toString(), v.toString() === ans);\n          return v.toString() === ans\n        })) {\n          correct[ans] = true;\n        }\n        else {\n          falsly[ans] = true;\n        }\n      }\n\n      setErrors(falsly);\n      setSuccess(correct);\n\n      if (!Answer(ans)) {\n        setError(ErrorTypes.answer);\n      }\n\n      setLoading(false);\n    }, 250);\n  }\n\n  React.useEffect(() => {\n    return () => {\n      if (timer.current !== null) {\n        window.clearTimeout(timer.current);\n      }\n    }\n  }, [])\n\n  const arr = Object.keys(answers);\n  const size = arr.length;\n  const classList = ['question'];\n\n  React.useEffect(() => {\n    setAnswers({});\n    setErrors({});\n    setSuccess({});\n    setAnswers({});\n    setError(ErrorTypes.picking);\n  }, [question]);\n\n  let isCorrect = true;\n  for (const ans of question.answers) {\n    if (!success[ans]) {\n      isCorrect = false;\n      break;\n    }\n  }\n\n  return (\n    <div className={classList.join(' ')}>\n      <span id=\"question-info\"><span>{index + 1}</span>/<span>{total}</span></span>\n      <div className={`frame ${isCorrect ? 'next' : ''}`}>\n        <span></span>\n        <h1>{question.text}</h1>\n      </div>\n\n      <button \n        disabled={loading} \n        onClick={submit} \n        className={isCorrect ? 'qsuccess' : error === ErrorTypes.nothing ? 'success' : `error ${error}`}\n      >\n        <span><span>{size}</span>/<span>{question.answers.length}</span> Answers</span>\n      </button>\n\n      <ul>\n        <h2>Options</h2>\n        {question.options.map((option, index) => {\n\n          const classNames = [];\n          if (answers[index + 1]) {\n            classNames.push('selected');\n\n            if (errors[index + 1]) classNames.push('error');\n            if (success[index + 1]) classNames.push('success');\n          }\n          return (\n<li \n            key={option.toString()} \n            className={classNames.join(' ')} \n            onClick={() => toggleAnswer(index + 1)}\n          >\n            {option}\n          </li>\n          )\n        }\n          \n        )}\n      </ul>\n    </div>\n  )\n}","import React from 'react';\n\nimport 'styles/list.css';\nimport { STATES } from './Brain';\n\nexport interface Props {\n  count:number,\n  state:STATES,\n  score:number,\n  loadQuestion:(index?:number)=>void;\n}\n\nexport default function View ({ count, score, state, loadQuestion }:Props) {\n  const [selected, setSelected] = React.useState(-1);\n\n  function submit(index:number) {\n    if (index <= score) {\n      loadQuestion(index);\n      setSelected(index);\n    }\n  }\n\n  return (\n    <div className=\"list-view\">\n      <h1>SCRUM<sub>test</sub></h1>\n\n      <div className=\"container\">\n      <ul>\n        {new Array(count).fill(0).map((v, index) => (\n          <li \n            key={index}\n            tabIndex={index + 2}\n            onClick={() => state === STATES.notification ? null : submit(index)}\n            className={[\n              selected === index ? 'selected' : '',\n              index <= score ? 'available' : 'disabled',\n              state === STATES.notification ? 'notification' : ''\n            ].join(' ')}\n          >\n            {index + 1}\n          </li>\n        ))}\n      </ul>\n      </div>\n    </div>\n  );\n}","/* eslint-disable import/no-anonymous-default-export */\nimport React from 'react';\n\nexport default function () {\n  return (\n    <p>ooh looks like someone doesnt play ball..</p>\n  )\n}","import React from 'react';\nimport DATA from 'data.json';\nimport { IQuestion } from 'types/question';\n\nimport Notification from './Notification';\nimport Loading from './Loading';\nimport Question from './Question';\nimport List from './List';\nimport Blank from './Blank';\n\n\nexport enum STATES {\n  loading,\n  question,\n  list,\n  notification,\n  blank,\n}\n\ninterface State {\n  score:number,\n  index:number,\n  state:STATES,\n  finished:{[key:number]:boolean},\n  question:IQuestion|null\n}\n\n\nexport default class Brain extends React.Component<{}, State> {\n\n  state = {\n    score: 0,\n    index: 0,\n    finished: {},\n    state: STATES.loading,\n    question: null\n  }\n\n  static Timer:null | number;\n  \n  componentDidMount() {\n    const score = window.localStorage.getItem('score');\n    console.log(score)\n    if (score === null) {\n      this.setState({ state: STATES.notification });\n    }\n    else {\n      console.log(STATES.list);\n      this.setState({\n        state: STATES.list,\n        score: Number(score)\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    if (Brain.Timer) {\n      window.clearTimeout(Brain.Timer);\n    }\n  }\n\n  agree = () => {\n    window.localStorage.setItem(\"score\", \"0\");\n    this.setState({ state: STATES.list, score: 0 });\n  }\n\n  disagree = () => {\n    window.localStorage.clear();\n    this.setState({ state: STATES.blank });\n  }\n\n  loadQuestion = (index?:number):void => {\n    let _i = this.state.score;\n    if (index && index <= this.state.score)\n       _i = index;\n    \n    const question = DATA[_i] as IQuestion;\n    this.setState({ question, state: STATES.question, index: _i });\n  }\n\n  Answer = (answers:number[]):boolean => {\n    if (this.state.question === null) return false;\n    if (answers.length === (this.state.question || { answers: [] }).answers.length) {\n      for (let i=0; i<answers.length; i++) {\n        if (answers[i] !== (this.state.question || { answers: [] }).answers[i]) {\n          return false;\n        }\n      }\n\n      if (this.state.index === this.state.score) {\n        this.setState({ score: this.state.score + 1});\n        window.localStorage.setItem(\"score\", (this.state.score + 1).toString());\n      }\n      Brain.Timer = window.setTimeout(() => this.loadQuestion(this.state.index + 1), 1000);\n      return true;\n    }\n    return false;\n  }\n\n  overlay() {\n    switch(this.state.state) {\n      case STATES.loading: \n        return <Loading />\n      case STATES.question: \n        if (this.state.question) \n          return <Question index={this.state.index} total={DATA.length} Answer={this.Answer} question={this.state.question || {} as IQuestion} />\n        return null;\n      case STATES.notification:\n        return <Notification \n                  toggle={this.state.state === STATES.notification} \n                  agree={this.agree} disagree={this.disagree} \n                />\n      default:\n        return null;\n    }\n  }\n\n  render () {\n    if (this.state.state === STATES.blank)\n      return <Blank />\n\n    const overlay = this.overlay();\n\n    return (\n      <div className=\"brain\">\n        <List score={this.state.score} state={this.state.state} count={DATA.length} loadQuestion={this.loadQuestion} />\n        {overlay}\n      </div>\n    )\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport reportWebVitals from './reportWebVitals';\n\nimport Brain from 'components/Brain';\nimport 'styles/index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Brain />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}